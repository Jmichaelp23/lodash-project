const _ = {
  clamp(number, lower, upper) {
    const lowerClampedValue = Math.max(number, lower);
    const clampedValue = Math.min(lowerClampedValue, upper);
    return clampedValue;
  },

  inRange(number, start, end) {
    if(end === undefined) {
      end = start;
      start = 0;
    };
    if(start > end) {
      const temp = end;
      end = start;
      start = temp;
    };
    const isInRange = start <= number && number < end;
    return isInRange;
  },

  words(string) {
    const words = string.split(' ');
    return words;
  },

  pad(string, length) {
   	if(string.length >= length) {
      return string;
    };
    const startPaddingLength = Math.floor((length - string.length) / 2);
    const endPaddingLength = length - string.length - startPaddingLength;
    const paddedString = (' ').repeat(startPaddingLength) + string + (' ').repeat(endPaddingLength);
    return paddedString;
	},

  has(object, key) {
    /*if(object[key]) {
      return true;
    } return false;*/
    const hasValue = object[key];
    if(hasValue === undefined) {
      return false;
    } return true;
  },

  invert(object) {
    let invertedObject = {};
    for (let key in object) {
      const originalValue = object[key];
      invertedObject = {originalValue: key}
    }
    return invertedObject;
  }
 findKey (object, predicate) {
    for (let key in object) {
      if (predicate(object[key])) {
        return key;
          } 
        }
      },
_.drop = function(array, n){

  if(n === 'undefined')
  {
    n = 1;
  }
  
  let droppedArray = array.slice(n, array.length);
  return droppedArray;        
    };
dropWhile(array, predicate) {
let dropNumber = array.findIndex(function(element, index) {
!(predicate(element, index, array))
return index;
});
let droppedArray = this.drop(array, dropNumber);
return droppedArray;
}
chunk (array, size = 1){
        let arrayChunks = [];
        for (let i = 0; i < array.length; i+size ){ 
        let arrayChunk = array.slice();  
        arrayChunks.push(arrayChunk);  
      }
        return arrayChunks
      },
};




// Do not write or modify code below this line.
module.exports = _;
